.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_example_extending_regression.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_example_extending_regression.py:


================================================
Extending Auto-Sklearn with Regression Component
================================================

The following example demonstrates how to create a new regression
component for using in auto-sklearn.


.. code-block:: default


    from ConfigSpace.configuration_space import ConfigurationSpace
    from ConfigSpace.hyperparameters import UniformFloatHyperparameter, \
        UniformIntegerHyperparameter, CategoricalHyperparameter

    import sklearn.metrics
    import autosklearn.regression
    import autosklearn.pipeline.components.regression
    from autosklearn.pipeline.components.base import AutoSklearnRegressionAlgorithm
    from autosklearn.pipeline.constants import SPARSE, DENSE, \
        SIGNED_DATA, UNSIGNED_DATA, PREDICTIONS

    from sklearn.datasets import load_diabetes
    from sklearn.model_selection import train_test_split









Implement kernel ridge regression component for auto-sklearn
============================================================


.. code-block:: default


    class KernelRidgeRegression(AutoSklearnRegressionAlgorithm):
        def __init__(self, alpha, kernel, gamma, degree, random_state=None):
            self.alpha = alpha
            self.kernel = kernel
            self.gamma = gamma
            self.degree = degree
            self.random_state = random_state
            self.estimator = None

        def fit(self, X, y):
            self.alpha = float(self.alpha)
            self.gamma = float(self.gamma)
            self.degree = int(self.degree)

            import sklearn.kernel_ridge
            self.estimator = sklearn.kernel_ridge.KernelRidge(alpha=self.alpha,
                                                              kernel=self.kernel,
                                                              gamma=self.gamma,
                                                              degree=self.degree,
                                                              )
            self.estimator.fit(X, y)
            return self

        def predict(self, X):
            if self.estimator is None:
                raise NotImplementedError
            return self.estimator.predict(X)

        @staticmethod
        def get_properties(dataset_properties=None):
            return {'shortname': 'KRR',
                    'name': 'Kernel Ridge Regression',
                    'handles_regression': True,
                    'handles_classification': False,
                    'handles_multiclass': False,
                    'handles_multilabel': False,
                    'handles_multioutput': True,
                    'is_deterministic': True,
                    'input': (SPARSE, DENSE, UNSIGNED_DATA, SIGNED_DATA),
                    'output': (PREDICTIONS,)}

        @staticmethod
        def get_hyperparameter_search_space(dataset_properties=None):
            cs = ConfigurationSpace()
            alpha = UniformFloatHyperparameter(
                name='alpha', lower=10 ** -5, upper=1, log=True, default_value=0.1)
            kernel = CategoricalHyperparameter(
                name='kernel',
                choices=['linear',
                         'rbf',
                         'sigmoid',
                         'polynomial',
                         ],
                default_value='linear'
            )
            gamma = UniformFloatHyperparameter(
                name='gamma', lower=0.00001, upper=1, default_value=0.1, log=True
            )
            degree = UniformIntegerHyperparameter(
                name='degree', lower=2, upper=5, default_value=3
            )
            cs.add_hyperparameters([alpha, kernel, gamma, degree])
            return cs


    # Add KRR component to auto-sklearn.
    autosklearn.pipeline.components.regression.add_regressor(KernelRidgeRegression)
    cs = KernelRidgeRegression.get_hyperparameter_search_space()
    print(cs)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Configuration space object:
      Hyperparameters:
        alpha, Type: UniformFloat, Range: [1e-05, 1.0], Default: 0.1, on log-scale
        degree, Type: UniformInteger, Range: [2, 5], Default: 3
        gamma, Type: UniformFloat, Range: [1e-05, 1.0], Default: 0.1, on log-scale
        kernel, Type: Categorical, Choices: {linear, rbf, sigmoid, polynomial}, Default: linear





Generate data
=============


.. code-block:: default


    X, y = load_diabetes(return_X_y=True)
    X_train, X_test, y_train, y_test = train_test_split(X, y)








Fit the model using KRR
=======================


.. code-block:: default


    reg = autosklearn.regression.AutoSklearnRegressor(
        time_left_for_this_task=30,
        per_run_time_limit=10,
        include_estimators=['KernelRidgeRegression'],
    )
    reg.fit(X_train, y_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [WARNING] [2020-07-28 21:57:07,384:AutoMLSMBO(1)::3b5083b8424f8374cdb165a792a26a65] Could not find meta-data directory /home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.8.0-py3.7.egg/autosklearn/metalearning/files/r2_regression_dense

    AutoSklearnRegressor(delete_output_folder_after_terminate=True,
                         delete_tmp_folder_after_terminate=True,
                         disable_evaluator_output=False, ensemble_memory_limit=1024,
                         ensemble_nbest=50, ensemble_size=50,
                         exclude_estimators=None, exclude_preprocessors=None,
                         get_smac_object_callback=None,
                         include_estimators=['KernelRidgeRegression'],
                         include_preprocessors=None,
                         initial_configurations_via_metalearning=25,
                         logging_config=None, max_models_on_disc=50,
                         metadata_directory=None, metric=None, ml_memory_limit=3072,
                         n_jobs=None, output_folder=None, per_run_time_limit=10,
                         resampling_strategy='holdout',
                         resampling_strategy_arguments=None, seed=1,
                         shared_mode=False, smac_scenario_args=None,
                         time_left_for_this_task=30, tmp_folder=None)



Print prediction score and statistics
=====================================


.. code-block:: default

    y_pred = reg.predict(X_test)
    print("r2 score: ", sklearn.metrics.r2_score(y_pred, y_test))
    print(reg.sprint_statistics())
    print(reg.show_models())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    r2 score:  -0.3347997303836794
    auto-sklearn results:
      Dataset name: 3b5083b8424f8374cdb165a792a26a65
      Metric: r2
      Best validation score: 0.485096
      Number of target algorithm runs: 24
      Number of successful target algorithm runs: 24
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    [(0.380000, SimpleRegressionPipeline({'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'normalize', 'feature_preprocessor:__choice__': 'kitchen_sinks', 'regressor:__choice__': 'KernelRidgeRegression', 'feature_preprocessor:kitchen_sinks:gamma': 0.00045140021914863313, 'feature_preprocessor:kitchen_sinks:n_components': 326, 'regressor:KernelRidgeRegression:alpha': 3.072232724470791e-05, 'regressor:KernelRidgeRegression:degree': 4, 'regressor:KernelRidgeRegression:gamma': 0.05393870165554965, 'regressor:KernelRidgeRegression:kernel': 'rbf'},
    dataset_properties={
      'task': 4,
      'sparse': False,
      'multioutput': False,
      'target_type': 'regression',
      'signed': False})),
    (0.340000, SimpleRegressionPipeline({'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'pca', 'regressor:__choice__': 'KernelRidgeRegression', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.0044586123687568886, 'feature_preprocessor:pca:keep_variance': 0.828698230499714, 'feature_preprocessor:pca:whiten': 'True', 'regressor:KernelRidgeRegression:alpha': 0.021283428280021683, 'regressor:KernelRidgeRegression:degree': 3, 'regressor:KernelRidgeRegression:gamma': 0.0006714512682303481, 'regressor:KernelRidgeRegression:kernel': 'polynomial'},
    dataset_properties={
      'task': 4,
      'sparse': False,
      'multioutput': False,
      'target_type': 'regression',
      'signed': False})),
    (0.160000, SimpleRegressionPipeline({'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'polynomial', 'regressor:__choice__': 'KernelRidgeRegression', 'feature_preprocessor:polynomial:degree': 2, 'feature_preprocessor:polynomial:include_bias': 'False', 'feature_preprocessor:polynomial:interaction_only': 'False', 'regressor:KernelRidgeRegression:alpha': 0.01653572030015636, 'regressor:KernelRidgeRegression:degree': 4, 'regressor:KernelRidgeRegression:gamma': 7.137514609251291e-05, 'regressor:KernelRidgeRegression:kernel': 'polynomial'},
    dataset_properties={
      'task': 4,
      'sparse': False,
      'multioutput': False,
      'target_type': 'regression',
      'signed': False})),
    (0.100000, SimpleRegressionPipeline({'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'quantile_transformer', 'feature_preprocessor:__choice__': 'kitchen_sinks', 'regressor:__choice__': 'KernelRidgeRegression', 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 1457, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'uniform', 'feature_preprocessor:kitchen_sinks:gamma': 1.0228687130461416, 'feature_preprocessor:kitchen_sinks:n_components': 9939, 'regressor:KernelRidgeRegression:alpha': 1.3300914416753203e-05, 'regressor:KernelRidgeRegression:degree': 5, 'regressor:KernelRidgeRegression:gamma': 0.03818133592244378, 'regressor:KernelRidgeRegression:kernel': 'rbf'},
    dataset_properties={
      'task': 4,
      'sparse': False,
      'multioutput': False,
      'target_type': 'regression',
      'signed': False})),
    (0.020000, SimpleRegressionPipeline({'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'pca', 'regressor:__choice__': 'KernelRidgeRegression', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.004850512506826782, 'feature_preprocessor:pca:keep_variance': 0.8514105071275243, 'feature_preprocessor:pca:whiten': 'True', 'regressor:KernelRidgeRegression:alpha': 0.013728495018454854, 'regressor:KernelRidgeRegression:degree': 3, 'regressor:KernelRidgeRegression:gamma': 2.369828741010483e-05, 'regressor:KernelRidgeRegression:kernel': 'rbf'},
    dataset_properties={
      'task': 4,
      'sparse': False,
      'multioutput': False,
      'target_type': 'regression',
      'signed': False})),
    ]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  24.523 seconds)


.. _sphx_glr_download_examples_example_extending_regression.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_extending_regression.py <example_extending_regression.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_extending_regression.ipynb <example_extending_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
