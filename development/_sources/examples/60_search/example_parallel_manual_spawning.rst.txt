.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_60_search_example_parallel_manual_spawning.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_60_search_example_parallel_manual_spawning.py:


===========================================
Parallel Usage with manual process spawning
===========================================

*Auto-sklearn* uses *SMAC* to automatically optimize the hyperparameters of
the training models. A variant of *SMAC*, called *pSMAC* (parallel SMAC),
provides a means of running several instances of *auto-sklearn* in a parallel
mode using several computational resources (detailed information of *pSMAC*
can be found `here <https://automl.github.io/SMAC3/master/psmac.html>`_).

This example shows how to spawn multiple instances of *Auto-sklearn* which
share the same output directory and thereby run in parallel. Use this example
as a starting point to parallelize *Auto-sklearn* across multiple machines.
To run *Auto-sklearn* on a single machine check out the example
`Parallel Usage on a single machine <example_parallel_n_jobs.html>`_.


.. code-block:: default


    import multiprocessing
    import shutil

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    from autosklearn.metrics import accuracy
    from autosklearn.classification import AutoSklearnClassifier
    from autosklearn.constants import MULTICLASS_CLASSIFICATION

    tmp_folder = '/tmp/autosklearn_parallel_2_example_tmp'
    output_folder = '/tmp/autosklearn_parallel_2_example_out'


    for dir_ in [tmp_folder, output_folder]:
        try:
            shutil.rmtree(dir_)
        except OSError:
            pass









Define utility function for multiprocessing
===========================================


.. code-block:: default


    def get_spawn_classifier(X_train, y_train):
        def spawn_classifier(seed, dataset_name):
            """Spawn a subprocess.

            auto-sklearn does not take care of spawning worker processes. This
            function, which is called several times in the main block is a new
            process which runs one instance of auto-sklearn.
            """

            # Use the initial configurations from meta-learning only in one out of
            # the four processes spawned. This prevents auto-sklearn from evaluating
            # the same configurations in four processes.
            if seed == 0:
                initial_configurations_via_metalearning = 25
                smac_scenario_args = {}
            else:
                initial_configurations_via_metalearning = 0
                smac_scenario_args = {'initial_incumbent': 'RANDOM'}

            # Arguments which are different to other runs of auto-sklearn:
            # 1. all classifiers write to the same output directory
            # 2. shared_mode is set to True, this enables sharing of data between
            # models.
            # 3. all instances of the AutoSklearnClassifier must have a different seed!
            automl = AutoSklearnClassifier(
                time_left_for_this_task=60,
                # sec., how long should this seed fit process run
                per_run_time_limit=15,
                # sec., each model may only take this long before it's killed
                ml_memory_limit=1024,
                # MB, memory limit imposed on each call to a ML algorithm
                shared_mode=True,  # tmp folder will be shared between seeds
                tmp_folder=tmp_folder,
                output_folder=output_folder,
                delete_tmp_folder_after_terminate=False,
                ensemble_size=0,
                # ensembles will be built when all optimization runs are finished
                initial_configurations_via_metalearning=(
                    initial_configurations_via_metalearning
                ),
                seed=seed,
                smac_scenario_args=smac_scenario_args,
            )
            automl.fit(X_train, y_train, dataset_name=dataset_name)
        return spawn_classifier









Data Loading
============


.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1)








Build and fit the classifier
============================


.. code-block:: default


    processes = []
    spawn_classifier = get_spawn_classifier(X_train, y_train)
    for i in range(4):  # set this at roughly half of your cores
        p = multiprocessing.Process(
            target=spawn_classifier,
            args=(i, 'breast_cancer'),
        )
        p.start()
        processes.append(p)
    for p in processes:
        p.join()

    print('Starting to build an ensemble!')
    automl = AutoSklearnClassifier(
        time_left_for_this_task=30,
        per_run_time_limit=15,
        ml_memory_limit=1024,
        shared_mode=True,
        ensemble_size=50,
        ensemble_nbest=200,
        tmp_folder=tmp_folder,
        output_folder=output_folder,
        initial_configurations_via_metalearning=0,
        seed=1,
        metric=accuracy,
    )

    # Both the ensemble_size and ensemble_nbest parameters can be changed now if
    # necessary
    automl.fit_ensemble(
        y_train,
        task=MULTICLASS_CLASSIFICATION,
        precision='32',
        dataset_name='digits',
        ensemble_size=20,
        ensemble_nbest=50,
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Starting to build an ensemble!
    [WARNING] [2020-09-23 22:32:06,048:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,050:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,050:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,051:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,051:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,052:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,052:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,053:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,053:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,054:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,054:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,055:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,056:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,056:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,057:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,057:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,058:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,058:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,059:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,059:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,060:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,060:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,061:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,061:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,062:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,062:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,063:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,063:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,064:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,064:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,065:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,065:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,065:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,065:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,065:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,065:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,066:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,066:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,066:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,066:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,066:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,066:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,066:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,066:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,066:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,066:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,067:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,067:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,067:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,067:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,067:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,067:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,067:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,067:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,067:EnsembleBuilder(1):digits] Interpreted str-precision as 32
    [WARNING] [2020-09-23 22:32:06,068:EnsembleBuilder(1):digits] Interpreted str-precision as 32

    AutoSklearnClassifier(delete_output_folder_after_terminate=False,
                          delete_tmp_folder_after_terminate=False,
                          disable_evaluator_output=False,
                          ensemble_memory_limit=1024, ensemble_nbest=200,
                          ensemble_size=50, exclude_estimators=None,
                          exclude_preprocessors=None, get_smac_object_callback=None,
                          include_estimators=None, include_preprocessors=None,
                          initial_configurati...
                          logging_config=None, max_models_on_disc=50,
                          metadata_directory=None, metric=None,
                          ml_memory_limit=1024, n_jobs=None,
                          output_folder='/tmp/autosklearn_parallel_2_example_out',
                          per_run_time_limit=15, resampling_strategy='holdout',
                          resampling_strategy_arguments=None, seed=1,
                          shared_mode=True, smac_scenario_args=None,
                          time_left_for_this_task=30,
                          tmp_folder='/tmp/autosklearn_parallel_2_example_tmp')



Report the score of the final ensemble
======================================


.. code-block:: default


    predictions = automl.predict(X_test)
    print(automl.show_models())
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [(0.250000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'adaboost', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'select_percentile_classification', 'classifier:adaboost:algorithm': 'SAMME', 'classifier:adaboost:learning_rate': 0.3611232856502331, 'classifier:adaboost:max_depth': 3, 'classifier:adaboost:n_estimators': 235, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.00017445320065443738, 'feature_preprocessor:select_percentile_classification:percentile': 53.86017892804136, 'feature_preprocessor:select_percentile_classification:score_func': 'chi2'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.100000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'libsvm_svc', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'fast_ica', 'classifier:libsvm_svc:C': 1561.1002600303584, 'classifier:libsvm_svc:gamma': 0.0024048551704194507, 'classifier:libsvm_svc:kernel': 'rbf', 'classifier:libsvm_svc:max_iter': -1, 'classifier:libsvm_svc:shrinking': 'False', 'classifier:libsvm_svc:tol': 0.0001936214667496851, 'feature_preprocessor:fast_ica:algorithm': 'parallel', 'feature_preprocessor:fast_ica:fun': 'logcosh', 'feature_preprocessor:fast_ica:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.100000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'extra_trees', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'no_preprocessing', 'classifier:extra_trees:bootstrap': 'False', 'classifier:extra_trees:criterion': 'entropy', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.933900673392165, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 7, 'classifier:extra_trees:min_samples_split': 4, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.100000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'lda', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'nystroem_sampler', 'classifier:lda:n_components': 220, 'classifier:lda:shrinkage': 'auto', 'classifier:lda:tol': 0.0013824567992319003, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.00021328932075284388, 'feature_preprocessor:nystroem_sampler:kernel': 'sigmoid', 'feature_preprocessor:nystroem_sampler:n_components': 295, 'feature_preprocessor:nystroem_sampler:coef0': 0.039972474835314076, 'feature_preprocessor:nystroem_sampler:gamma': 0.01017810882899714},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.100000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'lda', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'quantile_transformer', 'feature_preprocessor:__choice__': 'pca', 'classifier:lda:n_components': 246, 'classifier:lda:shrinkage': 'manual', 'classifier:lda:tol': 5.393037707305345e-05, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 1530, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'uniform', 'feature_preprocessor:pca:keep_variance': 0.5561340923445729, 'feature_preprocessor:pca:whiten': 'True', 'classifier:lda:shrinkage_factor': 0.3356797590542323},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.100000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'libsvm_svc', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'no_preprocessing', 'classifier:libsvm_svc:C': 2681.998807317996, 'classifier:libsvm_svc:gamma': 0.0011299948421773457, 'classifier:libsvm_svc:kernel': 'sigmoid', 'classifier:libsvm_svc:max_iter': -1, 'classifier:libsvm_svc:shrinking': 'False', 'classifier:libsvm_svc:tol': 1.5292507354478086e-05, 'classifier:libsvm_svc:coef0': -0.9558745731731211},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.050000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'no_preprocessing', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.01},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.050000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'feature_agglomeration', 'classifier:random_forest:bootstrap': 'False', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5238814331135578, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.010000000000000004, 'feature_preprocessor:feature_agglomeration:affinity': 'manhattan', 'feature_preprocessor:feature_agglomeration:linkage': 'average', 'feature_preprocessor:feature_agglomeration:n_clusters': 28, 'feature_preprocessor:feature_agglomeration:pooling_func': 'mean'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.050000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'liblinear_svc', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'normalize', 'feature_preprocessor:__choice__': 'kitchen_sinks', 'classifier:liblinear_svc:C': 0.16235407389284556, 'classifier:liblinear_svc:dual': 'False', 'classifier:liblinear_svc:fit_intercept': 'True', 'classifier:liblinear_svc:intercept_scaling': 1, 'classifier:liblinear_svc:loss': 'squared_hinge', 'classifier:liblinear_svc:multi_class': 'ovr', 'classifier:liblinear_svc:penalty': 'l2', 'classifier:liblinear_svc:tol': 0.009014169873967203, 'feature_preprocessor:kitchen_sinks:gamma': 0.10872664572551757, 'feature_preprocessor:kitchen_sinks:n_components': 1828},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.050000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'extra_trees', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'robust_scaler', 'feature_preprocessor:__choice__': 'fast_ica', 'classifier:extra_trees:bootstrap': 'True', 'classifier:extra_trees:criterion': 'gini', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.8466939442511731, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 20, 'classifier:extra_trees:min_samples_split': 11, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0, 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_max': 0.8780920883809207, 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_min': 0.09323514638473594, 'feature_preprocessor:fast_ica:algorithm': 'deflation', 'feature_preprocessor:fast_ica:fun': 'logcosh', 'feature_preprocessor:fast_ica:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.050000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'libsvm_svc', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'select_percentile_classification', 'classifier:libsvm_svc:C': 0.4258889478021975, 'classifier:libsvm_svc:gamma': 0.002160815822487332, 'classifier:libsvm_svc:kernel': 'sigmoid', 'classifier:libsvm_svc:max_iter': -1, 'classifier:libsvm_svc:shrinking': 'True', 'classifier:libsvm_svc:tol': 0.00012646133482131712, 'feature_preprocessor:select_percentile_classification:percentile': 13.609690808186992, 'feature_preprocessor:select_percentile_classification:score_func': 'chi2', 'classifier:libsvm_svc:coef0': 0.42843651741190336},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    ]
    Accuracy score 0.958041958041958





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.524 seconds)


.. _sphx_glr_download_examples_60_search_example_parallel_manual_spawning.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_parallel_manual_spawning.py <example_parallel_manual_spawning.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_parallel_manual_spawning.ipynb <example_parallel_manual_spawning.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
