.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_get_pipeline_components.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_40_advanced_example_get_pipeline_components.py:


======================
Obtain run information
======================

The following example shows how to obtain information from a finished
Auto-sklearn run. In particular, it shows:
* how to query which models were evaluated by Auto-sklearn
* how to query the models in the final ensemble
* how to get general statistics on the what Auto-sklearn evaluated

Auto-sklearn is a wrapper on top of
the sklearn models. This example illustrates how to interact
with the sklearn components directly, in this case a PCA preprocessor.


.. code-block:: default

    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification








Data Loading
============


.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1)








Build and fit the classifier
============================


.. code-block:: default


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=30,
        per_run_time_limit=10,
        disable_evaluator_output=False,
        # To simplify querying the models in the final ensemble, we
        # restrict auto-sklearn to use only pca as a preprocessor
        include_preprocessors=['pca'],
    )
    automl.fit(X_train, y_train, dataset_name='breast_cancer')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    AutoSklearnClassifier(delete_output_folder_after_terminate=True,
                          delete_tmp_folder_after_terminate=True,
                          disable_evaluator_output=False,
                          ensemble_memory_limit=1024, ensemble_nbest=50,
                          ensemble_size=50, exclude_estimators=None,
                          exclude_preprocessors=None, get_smac_object_callback=None,
                          include_estimators=None, include_preprocessors=['pca'],
                          initial_configurations_via_metalearning=25,
                          logging_config=None, max_models_on_disc=50,
                          metadata_directory=None, metric=None,
                          ml_memory_limit=3072, n_jobs=None, output_folder=None,
                          per_run_time_limit=10, resampling_strategy='holdout',
                          resampling_strategy_arguments=None, seed=1,
                          shared_mode=False, smac_scenario_args=None,
                          time_left_for_this_task=30, tmp_folder=None)



Predict using the model
=======================


.. code-block:: default


    predictions = automl.predict(X_test)
    print("Accuracy score:{}".format(
        sklearn.metrics.accuracy_score(y_test, predictions))
    )






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Accuracy score:0.9370629370629371




Report the models found by Auto-Sklearn
=======================================

Auto-sklearn uses
`Ensemble Selection <https://www.cs.cornell.edu/~alexn/papers/shotgun.icml04.revised.rev2.pdf>`_
to construct ensembles in a post-hoc fashion. The ensemble is a linear
weighting of all models constructed during the hyperparameter optimization.
This prints the final ensemble. It is a list of tuples, each tuple being
the model weight in the ensemble and the model itself.


.. code-block:: default


    print(automl.show_models())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [(0.220000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'passive_aggressive', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'quantile_transformer', 'feature_preprocessor:__choice__': 'pca', 'classifier:passive_aggressive:C': 7.246452206770111e-05, 'classifier:passive_aggressive:average': 'True', 'classifier:passive_aggressive:fit_intercept': 'True', 'classifier:passive_aggressive:loss': 'squared_hinge', 'classifier:passive_aggressive:tol': 0.0016732723303399723, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.0025950240309225293, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 1265, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'uniform', 'feature_preprocessor:pca:keep_variance': 0.5033755460498004, 'feature_preprocessor:pca:whiten': 'True'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.140000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'sgd', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'robust_scaler', 'feature_preprocessor:__choice__': 'pca', 'classifier:sgd:alpha': 0.013250457406704514, 'classifier:sgd:average': 'True', 'classifier:sgd:fit_intercept': 'True', 'classifier:sgd:learning_rate': 'constant', 'classifier:sgd:loss': 'perceptron', 'classifier:sgd:penalty': 'elasticnet', 'classifier:sgd:tol': 0.0780979468801553, 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_max': 0.7626267466053027, 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_min': 0.09670144092409025, 'feature_preprocessor:pca:keep_variance': 0.6623760946747949, 'feature_preprocessor:pca:whiten': 'True', 'classifier:sgd:eta0': 1.8326253343421417e-07, 'classifier:sgd:l1_ratio': 0.0016744345644101105},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.100000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'liblinear_svc', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:liblinear_svc:C': 119.37988809176355, 'classifier:liblinear_svc:dual': 'False', 'classifier:liblinear_svc:fit_intercept': 'True', 'classifier:liblinear_svc:intercept_scaling': 1, 'classifier:liblinear_svc:loss': 'squared_hinge', 'classifier:liblinear_svc:multi_class': 'ovr', 'classifier:liblinear_svc:penalty': 'l2', 'classifier:liblinear_svc:tol': 0.00476753850942449, 'feature_preprocessor:pca:keep_variance': 0.6361513747307154, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.100000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'qda', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'classifier:qda:reg_param': 0.0686374607394679, 'feature_preprocessor:pca:keep_variance': 0.8490260132946401, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.080000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'adaboost', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:adaboost:algorithm': 'SAMME', 'classifier:adaboost:learning_rate': 0.011233995624432622, 'classifier:adaboost:max_depth': 9, 'classifier:adaboost:n_estimators': 477, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.018370622484682127, 'feature_preprocessor:pca:keep_variance': 0.6039710338898471, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.080000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'extra_trees', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'pca', 'classifier:extra_trees:bootstrap': 'True', 'classifier:extra_trees:criterion': 'entropy', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.9728532763078892, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 13, 'classifier:extra_trees:min_samples_split': 9, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0, 'feature_preprocessor:pca:keep_variance': 0.6651071190864879, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.060000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'lda', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'quantile_transformer', 'feature_preprocessor:__choice__': 'pca', 'classifier:lda:n_components': 182, 'classifier:lda:shrinkage': 'manual', 'classifier:lda:tol': 5.854528654155377e-05, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.08784202461276662, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 702, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'normal', 'feature_preprocessor:pca:keep_variance': 0.620210250726932, 'feature_preprocessor:pca:whiten': 'False', 'classifier:lda:shrinkage_factor': 0.4996404251290214},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.060000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'gaussian_nb', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.46038104905772315, 'feature_preprocessor:pca:keep_variance': 0.8804568292513155, 'feature_preprocessor:pca:whiten': 'True'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.040000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'adaboost', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:adaboost:algorithm': 'SAMME', 'classifier:adaboost:learning_rate': 0.015984291290723266, 'classifier:adaboost:max_depth': 7, 'classifier:adaboost:n_estimators': 184, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.010000000000000004, 'feature_preprocessor:pca:keep_variance': 0.9333242689646983, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.040000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'sgd', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'classifier:sgd:alpha': 0.06771480505315035, 'classifier:sgd:average': 'False', 'classifier:sgd:fit_intercept': 'True', 'classifier:sgd:learning_rate': 'optimal', 'classifier:sgd:loss': 'hinge', 'classifier:sgd:penalty': 'l2', 'classifier:sgd:tol': 0.0008884635960965512, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.07572076762273279, 'feature_preprocessor:pca:keep_variance': 0.7411141861375143, 'feature_preprocessor:pca:whiten': 'True'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.040000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'decision_tree', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'classifier:decision_tree:criterion': 'gini', 'classifier:decision_tree:max_depth_factor': 1.5175520230962647, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 5, 'classifier:decision_tree:min_samples_split': 17, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.0008055350419382226, 'feature_preprocessor:pca:keep_variance': 0.8837713426491707, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.020000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'gaussian_nb', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'robust_scaler', 'feature_preprocessor:__choice__': 'pca', 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_max': 0.7726142187501072, 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_min': 0.2528893747232974, 'feature_preprocessor:pca:keep_variance': 0.8590206597057264, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.020000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.01, 'feature_preprocessor:pca:keep_variance': 0.9999, 'feature_preprocessor:pca:whiten': 'False'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    ]




Report statistics about the search
==================================

Print statistics about the auto-sklearn run such as number of
iterations, number of models failed with a time out etc.


.. code-block:: default

    print(automl.sprint_statistics())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    auto-sklearn results:
      Dataset name: breast_cancer
      Metric: accuracy
      Best validation score: 0.971631
      Number of target algorithm runs: 21
      Number of successful target algorithm runs: 20
      Number of crashed target algorithm runs: 1
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0





Detailed statistics about the search - part 1
=============================================

Auto-sklearn also keeps detailed statistics of the hyperparameter
optimization procedurce, which are stored in a so-called
`run history <https://automl.github.io/SMAC3/master/apidoc/smac.
runhistory.runhistory.html#smac.runhistory# .runhistory.RunHistory>`_.


.. code-block:: default


    print(automl._automl[0].runhistory_)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <smac.runhistory.runhistory.RunHistory object at 0x7f7d23d31550>




Runs are stored inside an ``OrderedDict`` called ``data``:


.. code-block:: default


    print(len(automl._automl[0].runhistory_.data))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    21




Let's iterative over all entries


.. code-block:: default


    for run_key in automl._automl[0].runhistory_.data:
        print('#########')
        print(run_key)
        print(automl._automl[0].runhistory_.data[run_key])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    #########
    RunKey(config_id=1, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.08510638297872342, time=1.0989654064178467, status=<StatusType.SUCCESS: 1>, starttime=1600987105.4958317, endtime=1600987106.6062958, additional_info={'duration': 1.053830623626709, 'num_run': 2, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=2, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.1063829787234043, time=0.885223388671875, status=<StatusType.SUCCESS: 1>, starttime=1600987106.6100903, endtime=1600987107.5063167, additional_info={'duration': 0.8454296588897705, 'num_run': 3, 'train_loss': 0.14385964912280702, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=3, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.04255319148936165, time=0.20595264434814453, status=<StatusType.SUCCESS: 1>, starttime=1600987107.508384, endtime=1600987107.7251604, additional_info={'duration': 0.1842494010925293, 'num_run': 4, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=4, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.05673758865248224, time=0.20424532890319824, status=<StatusType.SUCCESS: 1>, starttime=1600987107.7286932, endtime=1600987107.943998, additional_info={'duration': 0.18170475959777832, 'num_run': 5, 'train_loss': 0.0491228070175439, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=5, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.05673758865248224, time=0.2895798683166504, status=<StatusType.SUCCESS: 1>, starttime=1600987107.9460618, endtime=1600987108.2466276, additional_info={'duration': 0.26750755310058594, 'num_run': 6, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=6, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.1063829787234043, time=0.20614075660705566, status=<StatusType.SUCCESS: 1>, starttime=1600987108.2490637, endtime=1600987108.4660766, additional_info={'duration': 0.18359613418579102, 'num_run': 7, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=7, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.14184397163120566, time=0.27788567543029785, status=<StatusType.SUCCESS: 1>, starttime=1600987108.4680939, endtime=1600987108.7569766, additional_info={'duration': 0.25595998764038086, 'num_run': 8, 'train_loss': 0.0, 'configuration_origin': 'Initial design'})
    #########
    RunKey(config_id=8, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.05673758865248224, time=0.22432637214660645, status=<StatusType.SUCCESS: 1>, starttime=1600987110.9561446, endtime=1600987111.1912293, additional_info={'duration': 0.2012333869934082, 'num_run': 9, 'train_loss': 0.07719298245614037, 'configuration_origin': 'Random Search (sorted)'})
    #########
    RunKey(config_id=9, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.07801418439716312, time=0.3238658905029297, status=<StatusType.SUCCESS: 1>, starttime=1600987111.1933458, endtime=1600987111.5321863, additional_info={'duration': 0.2908623218536377, 'num_run': 10, 'train_loss': 0.10175438596491226, 'configuration_origin': 'Random Search (sorted)'})
    #########
    RunKey(config_id=10, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.04255319148936165, time=0.3919796943664551, status=<StatusType.SUCCESS: 1>, starttime=1600987113.8722744, endtime=1600987114.2750795, additional_info={'duration': 0.36918210983276367, 'num_run': 11, 'train_loss': 0.06315789473684208, 'configuration_origin': 'Random Search (sorted)'})
    #########
    RunKey(config_id=11, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.11347517730496459, time=0.2835698127746582, status=<StatusType.SUCCESS: 1>, starttime=1600987114.2792225, endtime=1600987114.5735943, additional_info={'duration': 0.26120877265930176, 'num_run': 12, 'train_loss': 0.0, 'configuration_origin': 'Random Search'})
    #########
    RunKey(config_id=12, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.05673758865248224, time=0.20552277565002441, status=<StatusType.SUCCESS: 1>, starttime=1600987114.5991557, endtime=1600987114.8154387, additional_info={'duration': 0.18329405784606934, 'num_run': 13, 'train_loss': 0.056140350877192935, 'configuration_origin': 'Random Search'})
    #########
    RunKey(config_id=13, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.05673758865248224, time=0.2831406593322754, status=<StatusType.SUCCESS: 1>, starttime=1600987114.8195446, endtime=1600987115.1134589, additional_info={'duration': 0.25997257232666016, 'num_run': 14, 'train_loss': 0.0736842105263158, 'configuration_origin': 'Random Search'})
    #########
    RunKey(config_id=14, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.05673758865248224, time=0.2859914302825928, status=<StatusType.SUCCESS: 1>, starttime=1600987115.1300302, endtime=1600987115.4274209, additional_info={'duration': 0.26250720024108887, 'num_run': 15, 'train_loss': 0.03508771929824561, 'configuration_origin': 'Random Search'})
    #########
    RunKey(config_id=15, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.08510638297872342, time=0.20730996131896973, status=<StatusType.SUCCESS: 1>, starttime=1600987115.43161, endtime=1600987115.649735, additional_info={'duration': 0.18467092514038086, 'num_run': 16, 'train_loss': 0.08421052631578951, 'configuration_origin': 'Random Search'})
    #########
    RunKey(config_id=16, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.028368794326241176, time=0.2764246463775635, status=<StatusType.SUCCESS: 1>, starttime=1600987117.7846715, endtime=1600987118.0806923, additional_info={'duration': 0.2541022300720215, 'num_run': 17, 'train_loss': 0.052631578947368474, 'configuration_origin': 'Random Search (sorted)'})
    #########
    RunKey(config_id=17, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.13475177304964536, time=0.33147740364074707, status=<StatusType.SUCCESS: 1>, starttime=1600987118.0897691, endtime=1600987118.432436, additional_info={'duration': 0.30416297912597656, 'num_run': 18, 'train_loss': 0.18947368421052635, 'configuration_origin': 'Random Search'})
    #########
    RunKey(config_id=18, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.09219858156028371, time=0.2833681106567383, status=<StatusType.SUCCESS: 1>, starttime=1600987121.080913, endtime=1600987121.3751245, additional_info={'duration': 0.2608377933502197, 'num_run': 19, 'train_loss': 0.09122807017543855, 'configuration_origin': 'Random Search (sorted)'})
    #########
    RunKey(config_id=19, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=1.0, time=0.21611475944519043, status=<StatusType.CRASHED: 3>, starttime=1600987121.3792243, endtime=1600987121.6065855, additional_info={'traceback': 'Traceback (most recent call last):\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.10.0.dev0-py3.7.egg/autosklearn/evaluation/__init__.py", line 29, in fit_predict_try_except_decorator\n    return ta(queue=queue, **kwargs)\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.10.0.dev0-py3.7.egg/autosklearn/evaluation/train_evaluator.py", line 1075, in eval_holdout\n    evaluator.fit_predict_and_loss(iterative=iterative)\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.10.0.dev0-py3.7.egg/autosklearn/evaluation/train_evaluator.py", line 465, in fit_predict_and_loss\n    add_model_to_self=self.num_cv_folds == 1,\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.10.0.dev0-py3.7.egg/autosklearn/evaluation/train_evaluator.py", line 806, in _partial_fit_and_predict_standard\n    self.Y_train[train_indices],\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.10.0.dev0-py3.7.egg/autosklearn/evaluation/abstract_evaluator.py", line 110, in _fit_and_suppress_warnings\n    model.fit(X, y)\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.10.0.dev0-py3.7.egg/autosklearn/pipeline/base.py", line 92, in fit\n    self.fit_estimator(X, y, **fit_params)\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.10.0.dev0-py3.7.egg/autosklearn/pipeline/base.py", line 109, in fit_estimator\n    self._final_estimator.fit(X, y, **fit_params)\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.10.0.dev0-py3.7.egg/autosklearn/pipeline/components/base.py", line 429, in fit\n    return self.choice.fit(X, y, **kwargs)\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.10.0.dev0-py3.7.egg/autosklearn/pipeline/components/base.py", line 153, in fit\n    self.iterative_fit(X, y, n_iter=n_iter, refit=False)\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.10.0.dev0-py3.7.egg/autosklearn/pipeline/components/classification/gradient_boosting.py", line 122, in iterative_fit\n    self.estimator.fit(X, y)\n  File "/home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py", line 356, in fit\n    raw_predictions_val, y_val\nUnboundLocalError: local variable \'raw_predictions_val\' referenced before assignment\n', 'error': 'UnboundLocalError("local variable \'raw_predictions_val\' referenced before assignment")', 'configuration_origin': 'Random Search'})
    #########
    RunKey(config_id=20, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.06382978723404253, time=0.28415799140930176, status=<StatusType.SUCCESS: 1>, starttime=1600987121.6387641, endtime=1600987121.9339023, additional_info={'duration': 0.2615928649902344, 'num_run': 21, 'train_loss': 0.07017543859649122, 'configuration_origin': 'Random Search'})
    #########
    RunKey(config_id=21, instance_id='{"task_id": "breast_cancer"}', seed=0, budget=0.0)
    RunValue(cost=0.12765957446808507, time=0.2877786159515381, status=<StatusType.SUCCESS: 1>, starttime=1600987121.9380162, endtime=1600987122.2369835, additional_info={'duration': 0.2655477523803711, 'num_run': 22, 'train_loss': 0.1719298245614035, 'configuration_origin': 'Random Search'})




and have a detailed look at one entry:


.. code-block:: default


    run_key = list(automl._automl[0].runhistory_.data.keys())[0]
    run_value = automl._automl[0].runhistory_.data[run_key]








The ``run_key`` contains all information describing a run:


.. code-block:: default


    print("Configuration ID:", run_key.config_id)
    print("Instance:", run_key.instance_id)
    print("Seed:", run_key.seed)
    print("Budget:", run_key.budget)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Configuration ID: 1
    Instance: {"task_id": "breast_cancer"}
    Seed: 0
    Budget: 0.0




and the configuration can be looked up in the run history as well:


.. code-block:: default


    print(automl._automl[0].runhistory_.ids_config[run_key.config_id])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Configuration:
      balancing:strategy, Value: 'none'
      classifier:__choice__, Value: 'random_forest'
      classifier:random_forest:bootstrap, Value: 'True'
      classifier:random_forest:criterion, Value: 'gini'
      classifier:random_forest:max_depth, Constant: 'None'
      classifier:random_forest:max_features, Value: 0.5
      classifier:random_forest:max_leaf_nodes, Constant: 'None'
      classifier:random_forest:min_impurity_decrease, Constant: 0.0
      classifier:random_forest:min_samples_leaf, Value: 1
      classifier:random_forest:min_samples_split, Value: 2
      classifier:random_forest:min_weight_fraction_leaf, Constant: 0.0
      data_preprocessing:categorical_transformer:categorical_encoding:__choice__, Value: 'one_hot_encoding'
      data_preprocessing:categorical_transformer:category_coalescence:__choice__, Value: 'minority_coalescer'
      data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction, Value: 0.01
      data_preprocessing:numerical_transformer:imputation:strategy, Value: 'mean'
      data_preprocessing:numerical_transformer:rescaling:__choice__, Value: 'standardize'
      feature_preprocessor:__choice__, Value: 'pca'
      feature_preprocessor:pca:keep_variance, Value: 0.9999
      feature_preprocessor:pca:whiten, Value: 'False'





The only other important entry is the budget in case you are using
auto-sklearn with
`successive halving <../60_search/example_successive_halving.html>`_.
The remaining parts of the key can be ignored for auto-sklearn and are
only there because the underlying optimizer, SMAC, can handle more general
problems, too.

The ``run_value`` contains all output from running the configuration:


.. code-block:: default


    print("Cost:", run_value.cost)
    print("Time:", run_value.time)
    print("Status:", run_value.status)
    print("Additional information:", run_value.additional_info)
    print("Start time:", run_value.starttime)
    print("End time", run_value.endtime)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cost: 0.08510638297872342
    Time: 1.0989654064178467
    Status: StatusType.SUCCESS
    Additional information: {'duration': 1.053830623626709, 'num_run': 2, 'train_loss': 0.0, 'configuration_origin': 'Initial design'}
    Start time: 1600987105.4958317
    End time 1600987106.6062958




Cost is basically the same as a loss. In case the metric to optimize for
should be maximized, it is internally transformed into a minimization
metric. Additionally, the status type gives information on whether the run
was successful, while the additional information's most interesting entry
is the internal training loss. Furthermore, there is detailed information
on the runtime available.

As an example, let's find the best configuration evaluated. As
Auto-sklearn solves a minimization problem internally, we need to look
for the entry with the lowest loss:


.. code-block:: default


    losses_and_configurations = [
        (run_value.cost, run_key.config_id)
        for run_key, run_value in automl._automl[0].runhistory_.data.items()
    ]
    losses_and_configurations.sort()
    print("Lowest loss:", losses_and_configurations[0][0])
    print(
        "Best configuration:",
        automl._automl[0].runhistory_.ids_config[losses_and_configurations[0][1]]
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Lowest loss: 0.028368794326241176
    Best configuration: Configuration:
      balancing:strategy, Value: 'weighting'
      classifier:__choice__, Value: 'liblinear_svc'
      classifier:liblinear_svc:C, Value: 119.37988809176355
      classifier:liblinear_svc:dual, Constant: 'False'
      classifier:liblinear_svc:fit_intercept, Constant: 'True'
      classifier:liblinear_svc:intercept_scaling, Constant: 1
      classifier:liblinear_svc:loss, Value: 'squared_hinge'
      classifier:liblinear_svc:multi_class, Constant: 'ovr'
      classifier:liblinear_svc:penalty, Value: 'l2'
      classifier:liblinear_svc:tol, Value: 0.00476753850942449
      data_preprocessing:categorical_transformer:categorical_encoding:__choice__, Value: 'no_encoding'
      data_preprocessing:categorical_transformer:category_coalescence:__choice__, Value: 'no_coalescense'
      data_preprocessing:numerical_transformer:imputation:strategy, Value: 'mean'
      data_preprocessing:numerical_transformer:rescaling:__choice__, Value: 'standardize'
      feature_preprocessor:__choice__, Value: 'pca'
      feature_preprocessor:pca:keep_variance, Value: 0.6361513747307154
      feature_preprocessor:pca:whiten, Value: 'False'





Detailed statistics about the search - part 2
=============================================

To maintain compatibility with scikit-learn, Auto-sklearn gives the
same data as
`cv_results_ <https://scikit-learn.org/stable/modules/generated/sklearn.
model_selection.GridSearchCV.html>`_.


.. code-block:: default


    print(automl.cv_results_)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'mean_test_score': array([0.91489362, 0.89361702, 0.95744681, 0.94326241, 0.94326241,
           0.89361702, 0.85815603, 0.94326241, 0.92198582, 0.95744681,
           0.88652482, 0.94326241, 0.94326241, 0.94326241, 0.91489362,
           0.97163121, 0.86524823, 0.90780142, 0.        , 0.93617021,
           0.87234043]), 'mean_fit_time': array([1.09896541, 0.88522339, 0.20595264, 0.20424533, 0.28957987,
           0.20614076, 0.27788568, 0.22432637, 0.32386589, 0.39197969,
           0.28356981, 0.20552278, 0.28314066, 0.28599143, 0.20730996,
           0.27642465, 0.3314774 , 0.28336811, 0.21611476, 0.28415799,
           0.28777862]), 'params': [{'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.01, 'feature_preprocessor:pca:keep_variance': 0.9999, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'classifier:__choice__': 'extra_trees', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'pca', 'classifier:extra_trees:bootstrap': 'True', 'classifier:extra_trees:criterion': 'entropy', 'classifier:extra_trees:max_depth': 'None', 'classifier:extra_trees:max_features': 0.9728532763078892, 'classifier:extra_trees:max_leaf_nodes': 'None', 'classifier:extra_trees:min_impurity_decrease': 0.0, 'classifier:extra_trees:min_samples_leaf': 13, 'classifier:extra_trees:min_samples_split': 9, 'classifier:extra_trees:min_weight_fraction_leaf': 0.0, 'feature_preprocessor:pca:keep_variance': 0.6651071190864879, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'classifier:__choice__': 'adaboost', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:adaboost:algorithm': 'SAMME', 'classifier:adaboost:learning_rate': 0.011233995624432622, 'classifier:adaboost:max_depth': 9, 'classifier:adaboost:n_estimators': 477, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.018370622484682127, 'feature_preprocessor:pca:keep_variance': 0.6039710338898471, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'classifier:__choice__': 'qda', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'classifier:qda:reg_param': 0.0686374607394679, 'feature_preprocessor:pca:keep_variance': 0.8490260132946401, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'adaboost', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:adaboost:algorithm': 'SAMME', 'classifier:adaboost:learning_rate': 0.015984291290723266, 'classifier:adaboost:max_depth': 7, 'classifier:adaboost:n_estimators': 184, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.010000000000000004, 'feature_preprocessor:pca:keep_variance': 0.9333242689646983, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'classifier:__choice__': 'k_nearest_neighbors', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'normalize', 'feature_preprocessor:__choice__': 'pca', 'classifier:k_nearest_neighbors:n_neighbors': 2, 'classifier:k_nearest_neighbors:p': 1, 'classifier:k_nearest_neighbors:weights': 'distance', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.019797877010737826, 'feature_preprocessor:pca:keep_variance': 0.8239678741128165, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'k_nearest_neighbors', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'pca', 'classifier:k_nearest_neighbors:n_neighbors': 1, 'classifier:k_nearest_neighbors:p': 2, 'classifier:k_nearest_neighbors:weights': 'distance', 'feature_preprocessor:pca:keep_variance': 0.6342574285315175, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'classifier:__choice__': 'passive_aggressive', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'quantile_transformer', 'feature_preprocessor:__choice__': 'pca', 'classifier:passive_aggressive:C': 7.246452206770111e-05, 'classifier:passive_aggressive:average': 'True', 'classifier:passive_aggressive:fit_intercept': 'True', 'classifier:passive_aggressive:loss': 'squared_hinge', 'classifier:passive_aggressive:tol': 0.0016732723303399723, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.0025950240309225293, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 1265, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'uniform', 'feature_preprocessor:pca:keep_variance': 0.5033755460498004, 'feature_preprocessor:pca:whiten': 'True'}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'gaussian_nb', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'robust_scaler', 'feature_preprocessor:__choice__': 'pca', 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_max': 0.7726142187501072, 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_min': 0.2528893747232974, 'feature_preprocessor:pca:keep_variance': 0.8590206597057264, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'lda', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'quantile_transformer', 'feature_preprocessor:__choice__': 'pca', 'classifier:lda:n_components': 182, 'classifier:lda:shrinkage': 'manual', 'classifier:lda:tol': 5.854528654155377e-05, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.08784202461276662, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 702, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'normal', 'feature_preprocessor:pca:keep_variance': 0.620210250726932, 'feature_preprocessor:pca:whiten': 'False', 'classifier:lda:shrinkage_factor': 0.4996404251290214}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'k_nearest_neighbors', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'normalize', 'feature_preprocessor:__choice__': 'pca', 'classifier:k_nearest_neighbors:n_neighbors': 7, 'classifier:k_nearest_neighbors:p': 1, 'classifier:k_nearest_neighbors:weights': 'distance', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.4069305689033863, 'feature_preprocessor:pca:keep_variance': 0.6364733404724181, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'classifier:__choice__': 'sgd', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'classifier:sgd:alpha': 0.06771480505315035, 'classifier:sgd:average': 'False', 'classifier:sgd:fit_intercept': 'True', 'classifier:sgd:learning_rate': 'optimal', 'classifier:sgd:loss': 'hinge', 'classifier:sgd:penalty': 'l2', 'classifier:sgd:tol': 0.0008884635960965512, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.07572076762273279, 'feature_preprocessor:pca:keep_variance': 0.7411141861375143, 'feature_preprocessor:pca:whiten': 'True'}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'gaussian_nb', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.46038104905772315, 'feature_preprocessor:pca:keep_variance': 0.8804568292513155, 'feature_preprocessor:pca:whiten': 'True'}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'decision_tree', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'classifier:decision_tree:criterion': 'gini', 'classifier:decision_tree:max_depth_factor': 1.5175520230962647, 'classifier:decision_tree:max_features': 1.0, 'classifier:decision_tree:max_leaf_nodes': 'None', 'classifier:decision_tree:min_impurity_decrease': 0.0, 'classifier:decision_tree:min_samples_leaf': 5, 'classifier:decision_tree:min_samples_split': 17, 'classifier:decision_tree:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.0008055350419382226, 'feature_preprocessor:pca:keep_variance': 0.8837713426491707, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'classifier:__choice__': 'bernoulli_nb', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'pca', 'classifier:bernoulli_nb:alpha': 4.3362743076188535, 'classifier:bernoulli_nb:fit_prior': 'True', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.23314171597587585, 'feature_preprocessor:pca:keep_variance': 0.584320169651602, 'feature_preprocessor:pca:whiten': 'True'}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'liblinear_svc', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:liblinear_svc:C': 119.37988809176355, 'classifier:liblinear_svc:dual': 'False', 'classifier:liblinear_svc:fit_intercept': 'True', 'classifier:liblinear_svc:intercept_scaling': 1, 'classifier:liblinear_svc:loss': 'squared_hinge', 'classifier:liblinear_svc:multi_class': 'ovr', 'classifier:liblinear_svc:penalty': 'l2', 'classifier:liblinear_svc:tol': 0.00476753850942449, 'feature_preprocessor:pca:keep_variance': 0.6361513747307154, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'none', 'classifier:__choice__': 'libsvm_svc', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:libsvm_svc:C': 0.13682388300661993, 'classifier:libsvm_svc:gamma': 3.7509293344171475, 'classifier:libsvm_svc:kernel': 'sigmoid', 'classifier:libsvm_svc:max_iter': -1, 'classifier:libsvm_svc:shrinking': 'True', 'classifier:libsvm_svc:tol': 9.528624677774026e-05, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.007804258610417552, 'feature_preprocessor:pca:keep_variance': 0.6701455553663613, 'feature_preprocessor:pca:whiten': 'True', 'classifier:libsvm_svc:coef0': -0.4159328815516299}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'lda', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'no_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'normalize', 'feature_preprocessor:__choice__': 'pca', 'classifier:lda:n_components': 113, 'classifier:lda:shrinkage': 'manual', 'classifier:lda:tol': 0.01977402503867476, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.15093361198988475, 'feature_preprocessor:pca:keep_variance': 0.7928733473503238, 'feature_preprocessor:pca:whiten': 'True', 'classifier:lda:shrinkage_factor': 0.5956761542571667}, {'balancing:strategy': 'none', 'classifier:__choice__': 'gradient_boosting', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'pca', 'classifier:gradient_boosting:early_stop': 'train', 'classifier:gradient_boosting:l2_regularization': 1.148224147370886e-06, 'classifier:gradient_boosting:learning_rate': 0.6322483796196795, 'classifier:gradient_boosting:loss': 'auto', 'classifier:gradient_boosting:max_bins': 255, 'classifier:gradient_boosting:max_depth': 'None', 'classifier:gradient_boosting:max_leaf_nodes': 15, 'classifier:gradient_boosting:min_samples_leaf': 1, 'classifier:gradient_boosting:scoring': 'loss', 'classifier:gradient_boosting:tol': 1e-07, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.00018242711236930763, 'feature_preprocessor:pca:keep_variance': 0.9911464706964226, 'feature_preprocessor:pca:whiten': 'False', 'classifier:gradient_boosting:n_iter_no_change': 6}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'bernoulli_nb', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'minmax', 'feature_preprocessor:__choice__': 'pca', 'classifier:bernoulli_nb:alpha': 0.6397564948350345, 'classifier:bernoulli_nb:fit_prior': 'True', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.003619554085916968, 'feature_preprocessor:pca:keep_variance': 0.5176025412054891, 'feature_preprocessor:pca:whiten': 'False'}, {'balancing:strategy': 'weighting', 'classifier:__choice__': 'sgd', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'robust_scaler', 'feature_preprocessor:__choice__': 'pca', 'classifier:sgd:alpha': 0.013250457406704514, 'classifier:sgd:average': 'True', 'classifier:sgd:fit_intercept': 'True', 'classifier:sgd:learning_rate': 'constant', 'classifier:sgd:loss': 'perceptron', 'classifier:sgd:penalty': 'elasticnet', 'classifier:sgd:tol': 0.0780979468801553, 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_max': 0.7626267466053027, 'data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_min': 0.09670144092409025, 'feature_preprocessor:pca:keep_variance': 0.6623760946747949, 'feature_preprocessor:pca:whiten': 'True', 'classifier:sgd:eta0': 1.8326253343421417e-07, 'classifier:sgd:l1_ratio': 0.0016744345644101105}], 'rank_test_scores': array([12, 15,  2,  4,  4, 15, 20,  4, 11,  2, 17,  4,  4,  4, 12,  1, 19,
           14, 21, 10, 18]), 'status': ['Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Success', 'Crash', 'Success', 'Success'], 'budgets': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'param_balancing:strategy': masked_array(data=['none', 'none', 'none', 'none', 'weighting', 'none',
                       'weighting', 'none', 'weighting', 'weighting',
                       'weighting', 'none', 'weighting', 'weighting', 'none',
                       'weighting', 'none', 'weighting', 'none', 'weighting',
                       'weighting'],
                 mask=[False, False, False, False, False, False, False, False,
                       False, False, False, False, False, False, False, False,
                       False, False, False, False, False],
           fill_value='N/A',
                dtype='<U9'), 'param_classifier:__choice__': masked_array(data=['random_forest', 'extra_trees', 'adaboost', 'qda',
                       'adaboost', 'k_nearest_neighbors',
                       'k_nearest_neighbors', 'passive_aggressive',
                       'gaussian_nb', 'lda', 'k_nearest_neighbors', 'sgd',
                       'gaussian_nb', 'decision_tree', 'bernoulli_nb',
                       'liblinear_svc', 'libsvm_svc', 'lda',
                       'gradient_boosting', 'bernoulli_nb', 'sgd'],
                 mask=[False, False, False, False, False, False, False, False,
                       False, False, False, False, False, False, False, False,
                       False, False, False, False, False],
           fill_value='N/A',
                dtype='<U19'), 'param_data_preprocessing:categorical_transformer:categorical_encoding:__choice__': masked_array(data=['one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                       'no_encoding', 'no_encoding', 'no_encoding',
                       'one_hot_encoding', 'no_encoding', 'no_encoding',
                       'one_hot_encoding', 'one_hot_encoding', 'no_encoding',
                       'one_hot_encoding', 'one_hot_encoding',
                       'one_hot_encoding', 'no_encoding', 'no_encoding',
                       'no_encoding', 'one_hot_encoding', 'one_hot_encoding',
                       'one_hot_encoding'],
                 mask=[False, False, False, False, False, False, False, False,
                       False, False, False, False, False, False, False, False,
                       False, False, False, False, False],
           fill_value='N/A',
                dtype='<U16'), 'param_data_preprocessing:categorical_transformer:category_coalescence:__choice__': masked_array(data=['minority_coalescer', 'no_coalescense',
                       'minority_coalescer', 'no_coalescense',
                       'minority_coalescer', 'minority_coalescer',
                       'no_coalescense', 'minority_coalescer',
                       'no_coalescense', 'minority_coalescer',
                       'minority_coalescer', 'minority_coalescer',
                       'minority_coalescer', 'minority_coalescer',
                       'minority_coalescer', 'no_coalescense',
                       'minority_coalescer', 'minority_coalescer',
                       'minority_coalescer', 'minority_coalescer',
                       'no_coalescense'],
                 mask=[False, False, False, False, False, False, False, False,
                       False, False, False, False, False, False, False, False,
                       False, False, False, False, False],
           fill_value='N/A',
                dtype='<U18'), 'param_data_preprocessing:numerical_transformer:imputation:strategy': masked_array(data=['mean', 'mean', 'mean', 'median', 'median', 'mean',
                       'median', 'mean', 'median', 'mean', 'median', 'mean',
                       'median', 'most_frequent', 'most_frequent', 'mean',
                       'most_frequent', 'most_frequent', 'median',
                       'most_frequent', 'mean'],
                 mask=[False, False, False, False, False, False, False, False,
                       False, False, False, False, False, False, False, False,
                       False, False, False, False, False],
           fill_value='N/A',
                dtype='<U13'), 'param_data_preprocessing:numerical_transformer:rescaling:__choice__': masked_array(data=['standardize', 'none', 'standardize', 'minmax',
                       'standardize', 'normalize', 'none',
                       'quantile_transformer', 'robust_scaler',
                       'quantile_transformer', 'normalize', 'minmax',
                       'minmax', 'minmax', 'none', 'standardize',
                       'standardize', 'normalize', 'standardize', 'minmax',
                       'robust_scaler'],
                 mask=[False, False, False, False, False, False, False, False,
                       False, False, False, False, False, False, False, False,
                       False, False, False, False, False],
           fill_value='N/A',
                dtype='<U20'), 'param_feature_preprocessor:__choice__': masked_array(data=['pca', 'pca', 'pca', 'pca', 'pca', 'pca', 'pca', 'pca',
                       'pca', 'pca', 'pca', 'pca', 'pca', 'pca', 'pca', 'pca',
                       'pca', 'pca', 'pca', 'pca', 'pca'],
                 mask=[False, False, False, False, False, False, False, False,
                       False, False, False, False, False, False, False, False,
                       False, False, False, False, False],
           fill_value='N/A',
                dtype='<U3'), 'param_classifier:adaboost:algorithm': masked_array(data=[--, --, 'SAMME', --, 'SAMME', --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --, --, --],
                 mask=[ True,  True, False,  True, False,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:adaboost:learning_rate': masked_array(data=[--, --, 0.011233995624432622, --, 0.015984291290723266,
                       --, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --],
                 mask=[ True,  True, False,  True, False,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:adaboost:max_depth': masked_array(data=[--, --, 9.0, --, 7.0, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True,  True, False,  True, False,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:adaboost:n_estimators': masked_array(data=[--, --, 477.0, --, 184.0, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --, --],
                 mask=[ True,  True, False,  True, False,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:bernoulli_nb:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       4.3362743076188535, --, --, --, --, 0.6397564948350345,
                       --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True, False,  True,
                        True,  True,  True, False,  True],
           fill_value=1e+20), 'param_classifier:bernoulli_nb:fit_prior': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       'True', --, --, --, --, 'True', --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True, False,  True,
                        True,  True,  True, False,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:decision_tree:criterion': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                       'gini', --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True, False,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:decision_tree:max_depth_factor': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                       1.5175520230962647, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True, False,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:decision_tree:max_features': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                       1.0, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True, False,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:decision_tree:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                       'None', --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True, False,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:decision_tree:min_impurity_decrease': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                       0.0, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True, False,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:decision_tree:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                       5.0, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True, False,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:decision_tree:min_samples_split': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                       17.0, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True, False,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:decision_tree:min_weight_fraction_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --,
                       0.0, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True, False,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:extra_trees:bootstrap': masked_array(data=[--, 'True', --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:extra_trees:criterion': masked_array(data=[--, 'entropy', --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --, --],
                 mask=[ True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:extra_trees:max_depth': masked_array(data=[--, 'None', --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:extra_trees:max_features': masked_array(data=[--, 0.9728532763078892, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --, --, --, --],
                 mask=[ True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:extra_trees:max_leaf_nodes': masked_array(data=[--, 'None', --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:extra_trees:min_impurity_decrease': masked_array(data=[--, 0.0, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:extra_trees:min_samples_leaf': masked_array(data=[--, 13.0, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:extra_trees:min_samples_split': masked_array(data=[--, 9.0, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:extra_trees:min_weight_fraction_leaf': masked_array(data=[--, 0.0, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:gradient_boosting:early_stop': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 'train', --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:gradient_boosting:l2_regularization': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 1.148224147370886e-06, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value=1e+20), 'param_classifier:gradient_boosting:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 0.6322483796196795, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value=1e+20), 'param_classifier:gradient_boosting:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 'auto', --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:gradient_boosting:max_bins': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 255.0, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value=1e+20), 'param_classifier:gradient_boosting:max_depth': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 'None', --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:gradient_boosting:max_leaf_nodes': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 15.0, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value=1e+20), 'param_classifier:gradient_boosting:min_samples_leaf': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 1.0, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value=1e+20), 'param_classifier:gradient_boosting:scoring': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 'loss', --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:gradient_boosting:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 1e-07, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value=1e+20), 'param_classifier:k_nearest_neighbors:n_neighbors': masked_array(data=[--, --, --, --, --, 2.0, 1.0, --, --, --, 7.0, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True, False, False,  True,
                        True,  True, False,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:k_nearest_neighbors:p': masked_array(data=[--, --, --, --, --, 1.0, 2.0, --, --, --, 1.0, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True, False, False,  True,
                        True,  True, False,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:k_nearest_neighbors:weights': masked_array(data=[--, --, --, --, --, 'distance', 'distance', --, --, --,
                       'distance', --, --, --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True, False, False,  True,
                        True,  True, False,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:lda:n_components': masked_array(data=[--, --, --, --, --, --, --, --, --, 182.0, --, --, --,
                       --, --, --, --, 113.0, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True, False,  True,  True,  True,  True,  True,  True,
                        True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:lda:shrinkage': masked_array(data=[--, --, --, --, --, --, --, --, --, 'manual', --, --,
                       --, --, --, --, --, 'manual', --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True, False,  True,  True,  True,  True,  True,  True,
                        True, False,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:lda:tol': masked_array(data=[--, --, --, --, --, --, --, --, --,
                       5.854528654155377e-05, --, --, --, --, --, --, --,
                       0.01977402503867476, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True, False,  True,  True,  True,  True,  True,  True,
                        True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:liblinear_svc:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, 119.37988809176355, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:liblinear_svc:dual': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, 'False', --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:liblinear_svc:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, 'True', --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:liblinear_svc:intercept_scaling': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, 1.0, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:liblinear_svc:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, 'squared_hinge', --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:liblinear_svc:multi_class': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, 'ovr', --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:liblinear_svc:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, 'l2', --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:liblinear_svc:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, 0.00476753850942449, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:libsvm_svc:C': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, 0.13682388300661993, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                       False,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:libsvm_svc:gamma': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, 3.7509293344171475, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                       False,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:libsvm_svc:kernel': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, 'sigmoid', --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                       False,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:libsvm_svc:max_iter': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, -1.0, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                       False,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:libsvm_svc:shrinking': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, 'True', --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                       False,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:libsvm_svc:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, 9.528624677774026e-05, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                       False,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:passive_aggressive:C': masked_array(data=[--, --, --, --, --, --, --, 7.246452206770111e-05, --,
                       --, --, --, --, --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:passive_aggressive:average': masked_array(data=[--, --, --, --, --, --, --, 'True', --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:passive_aggressive:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, 'True', --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:passive_aggressive:loss': masked_array(data=[--, --, --, --, --, --, --, 'squared_hinge', --, --,
                       --, --, --, --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:passive_aggressive:tol': masked_array(data=[--, --, --, --, --, --, --, 0.0016732723303399723, --,
                       --, --, --, --, --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True, False,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:qda:reg_param': masked_array(data=[--, --, --, 0.0686374607394679, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True, False,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:random_forest:bootstrap': masked_array(data=['True', --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U4'), 'param_classifier:random_forest:criterion': masked_array(data=['gini', --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U4'), 'param_classifier:random_forest:max_depth': masked_array(data=['None', --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U4'), 'param_classifier:random_forest:max_features': masked_array(data=[0.5, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:random_forest:max_leaf_nodes': masked_array(data=['None', --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U4'), 'param_classifier:random_forest:min_impurity_decrease': masked_array(data=[0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:random_forest:min_samples_leaf': masked_array(data=[1.0, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:random_forest:min_samples_split': masked_array(data=[2.0, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:random_forest:min_weight_fraction_leaf': masked_array(data=[0.0, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --, --],
                 mask=[False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:sgd:alpha': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --,
                       0.06771480505315035, --, --, --, --, --, --, --, --,
                       0.013250457406704514],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True, False,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value=1e+20), 'param_classifier:sgd:average': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 'False',
                       --, --, --, --, --, --, --, --, 'True'],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True, False,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:sgd:fit_intercept': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 'True', --,
                       --, --, --, --, --, --, --, 'True'],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True, False,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:sgd:learning_rate': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 'optimal',
                       --, --, --, --, --, --, --, --, 'constant'],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True, False,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:sgd:loss': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 'hinge',
                       --, --, --, --, --, --, --, --, 'perceptron'],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True, False,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:sgd:penalty': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, 'l2', --,
                       --, --, --, --, --, --, --, 'elasticnet'],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True, False,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value='N/A',
                dtype='<U32'), 'param_classifier:sgd:tol': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --,
                       0.0008884635960965512, --, --, --, --, --, --, --, --,
                       0.0780979468801553],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True, False,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value=1e+20), 'param_data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': masked_array(data=[0.01, --, 0.018370622484682127, --,
                       0.010000000000000004, 0.019797877010737826, --,
                       0.0025950240309225293, --, 0.08784202461276662,
                       0.4069305689033863, 0.07572076762273279,
                       0.46038104905772315, 0.0008055350419382226,
                       0.23314171597587585, --, 0.007804258610417552,
                       0.15093361198988475, 0.00018242711236930763,
                       0.003619554085916968, --],
                 mask=[False,  True, False,  True, False, False,  True, False,
                        True, False, False, False, False, False, False,  True,
                       False, False, False, False,  True],
           fill_value=1e+20), 'param_data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': masked_array(data=[--, --, --, --, --, --, --, 1265.0, --, 702.0, --, --,
                       --, --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True, False,
                        True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20), 'param_data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': masked_array(data=[--, --, --, --, --, --, --, 'uniform', --, 'normal',
                       --, --, --, --, --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True, False,
                        True, False,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value='N/A',
                dtype='<U32'), 'param_data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_max': masked_array(data=[--, --, --, --, --, --, --, --, 0.7726142187501072, --,
                       --, --, --, --, --, --, --, --, --, --,
                       0.7626267466053027],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                       False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value=1e+20), 'param_data_preprocessing:numerical_transformer:rescaling:robust_scaler:q_min': masked_array(data=[--, --, --, --, --, --, --, --, 0.2528893747232974, --,
                       --, --, --, --, --, --, --, --, --, --,
                       0.09670144092409025],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                       False,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value=1e+20), 'param_feature_preprocessor:pca:keep_variance': masked_array(data=[0.9999, 0.6651071190864879, 0.6039710338898471,
                       0.8490260132946401, 0.9333242689646983,
                       0.8239678741128165, 0.6342574285315175,
                       0.5033755460498004, 0.8590206597057264,
                       0.620210250726932, 0.6364733404724181,
                       0.7411141861375143, 0.8804568292513155,
                       0.8837713426491707, 0.584320169651602,
                       0.6361513747307154, 0.6701455553663613,
                       0.7928733473503238, 0.9911464706964226,
                       0.5176025412054891, 0.6623760946747949],
                 mask=[False, False, False, False, False, False, False, False,
                       False, False, False, False, False, False, False, False,
                       False, False, False, False, False],
           fill_value=1e+20), 'param_feature_preprocessor:pca:whiten': masked_array(data=['False', 'False', 'False', 'False', 'False', 'False',
                       'False', 'True', 'False', 'False', 'False', 'True',
                       'True', 'False', 'True', 'False', 'True', 'True',
                       'False', 'False', 'True'],
                 mask=[False, False, False, False, False, False, False, False,
                       False, False, False, False, False, False, False, False,
                       False, False, False, False, False],
           fill_value='N/A',
                dtype='<U5'), 'param_classifier:gradient_boosting:n_iter_no_change': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, 6.0, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True, False,  True,  True],
           fill_value=1e+20), 'param_classifier:gradient_boosting:validation_fraction': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:lda:shrinkage_factor': masked_array(data=[--, --, --, --, --, --, --, --, --, 0.4996404251290214,
                       --, --, --, --, --, --, --, 0.5956761542571667, --, --,
                       --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True, False,  True,  True,  True,  True,  True,  True,
                        True, False,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:libsvm_svc:coef0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, -0.4159328815516299, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                       False,  True,  True,  True,  True],
           fill_value=1e+20), 'param_classifier:libsvm_svc:degree': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:epsilon': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64), 'param_classifier:sgd:eta0': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, 1.8326253343421417e-07],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value=1e+20), 'param_classifier:sgd:l1_ratio': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, 0.0016744345644101105],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True, False],
           fill_value=1e+20), 'param_classifier:sgd:power_t': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,
                       --, --, --, --, --, --, --],
                 mask=[ True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True,  True,  True,  True,
                        True,  True,  True,  True,  True],
           fill_value=1e+20,
                dtype=float64)}




Inspect the components of the best model
========================================

Iterate over the components of the model and print
The explained variance ratio per stage


.. code-block:: default

    for i, (weight, pipeline) in enumerate(automl.get_models_with_weights()):
        for stage_name, component in pipeline.named_steps.items():
            if 'preprocessor' in stage_name:
                print(
                    "The {}th pipeline has a explained variance of {}".format(
                        i,
                        # The component is an instance of AutoSklearnChoice.
                        # Access the sklearn object via the choice attribute
                        # We want the explained variance attributed of
                        # each principal component
                        component.choice.preprocessor.explained_variance_ratio_
                    )
                )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The 0th pipeline has a explained variance of [0.45954161 0.18012095]
    The 1th pipeline has a explained variance of [0.69126045]
    The 2th pipeline has a explained variance of [0.43295688 0.1790573  0.11173757]
    The 3th pipeline has a explained variance of [0.49503611 0.16649281 0.09111888 0.07213284 0.04865917]
    The 4th pipeline has a explained variance of [0.43295688 0.1790573 ]
    The 5th pipeline has a explained variance of [0.98080571]
    The 6th pipeline has a explained variance of [0.46038756 0.1612497 ]
    The 7th pipeline has a explained variance of [0.49503611 0.16649281 0.09111888 0.07213284 0.04865917 0.03208923]
    The 8th pipeline has a explained variance of [0.43295688 0.1790573  0.11173757 0.06807243 0.05946115 0.03706299
     0.0238431  0.01493261 0.01376414]
    The 9th pipeline has a explained variance of [0.49503611 0.16649281 0.09111888]
    The 10th pipeline has a explained variance of [0.49503611 0.16649281 0.09111888 0.07213284 0.04865917 0.03208923]
    The 11th pipeline has a explained variance of [0.68428126 0.13065653 0.08649607]
    The 12th pipeline has a explained variance of [4.32956881e-01 1.79057296e-01 1.11737571e-01 6.80724345e-02
     5.94611519e-02 3.70629898e-02 2.38430977e-02 1.49326086e-02
     1.37641366e-02 1.13704890e-02 1.03737258e-02 8.74116751e-03
     7.57629717e-03 4.86528503e-03 3.32225143e-03 2.55773043e-03
     2.20759805e-03 1.88675402e-03 1.36245140e-03 1.03409213e-03
     8.39749085e-04 7.91287172e-04 6.75655689e-04 5.42961621e-04
     5.02641737e-04 2.07827509e-04 1.74597367e-04]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  24.646 seconds)


.. _sphx_glr_download_examples_40_advanced_example_get_pipeline_components.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_get_pipeline_components.py <example_get_pipeline_components.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_get_pipeline_components.ipynb <example_get_pipeline_components.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
