.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_metrics.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_40_advanced_example_metrics.py:


=======
Metrics
=======

*Auto-sklearn* supports various built-in metrics, which can be found in the
:ref:`metrics section in the API <api:Built-in Metrics>`. However, it is also
possible to define your own metric and use it to fit and evaluate your model.
The following examples show how to use built-in and self-defined metrics for a
classification problem.


.. code-block:: default


    import numpy as np

    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    import autosklearn.classification
    import autosklearn.metrics









Custom metrics definition
=========================


.. code-block:: default


    def accuracy(solution, prediction):
        # custom function defining accuracy
        return np.mean(solution == prediction)


    def error(solution, prediction):
        # custom function defining error
        return np.mean(solution != prediction)


    def accuracy_wk(solution, prediction, dummy):
        # custom function defining accuracy and accepting an additional argument
        assert dummy is None
        return np.mean(solution == prediction)


    def error_wk(solution, prediction, dummy):
        # custom function defining error and accepting an additional argument
        assert dummy is None
        return np.mean(solution != prediction)









Data Loading
============


.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1)








Print a list of available metrics
=================================


.. code-block:: default


    print("Available CLASSIFICATION metrics autosklearn.metrics.*:")
    print("\t*" + "\n\t*".join(autosklearn.metrics.CLASSIFICATION_METRICS))

    print("Available REGRESSION autosklearn.metrics.*:")
    print("\t*" + "\n\t*".join(autosklearn.metrics.REGRESSION_METRICS))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Available CLASSIFICATION metrics autosklearn.metrics.*:
            *accuracy
            *balanced_accuracy
            *roc_auc
            *average_precision
            *log_loss
            *precision
            *precision_macro
            *precision_micro
            *precision_samples
            *precision_weighted
            *recall
            *recall_macro
            *recall_micro
            *recall_samples
            *recall_weighted
            *f1
            *f1_macro
            *f1_micro
            *f1_samples
            *f1_weighted
    Available REGRESSION autosklearn.metrics.*:
            *r2
            *mean_squared_error
            *mean_absolute_error
            *median_absolute_error




First example: Use predefined accuracy metric
=============================================


.. code-block:: default


    print("#"*80)
    print("Use predefined accuracy metric")
    cls = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=30,
        seed=1,
        metric=autosklearn.metrics.accuracy,
    )
    cls.fit(X_train, y_train)

    predictions = cls.predict(X_test)
    print("Accuracy score {:g} using {:s}".
          format(sklearn.metrics.accuracy_score(y_test, predictions),
                 cls._automl[0]._metric.name))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ################################################################################
    Use predefined accuracy metric
    [WARNING] [2020-09-03 22:10:12,242:AutoML(1):d6d58dae5b02e07797da6d4d126ac9b6] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    Accuracy score 0.958042 using accuracy




Second example: Use own accuracy metric
=======================================


.. code-block:: default


    print("#"*80)
    print("Use self defined accuracy metric")
    accuracy_scorer = autosklearn.metrics.make_scorer(
        name="accu",
        score_func=accuracy,
        optimum=1,
        greater_is_better=True,
        needs_proba=False,
        needs_threshold=False,
    )
    cls = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=30,
        seed=1,
        metric=accuracy_scorer,
    )
    cls.fit(X_train, y_train)

    predictions = cls.predict(X_test)
    print("Accuracy score {:g} using {:s}".
          format(sklearn.metrics.accuracy_score(y_test, predictions),
                 cls._automl[0]._metric.name))

    print("#"*80)
    print("Use self defined error metric")
    error_rate = autosklearn.metrics.make_scorer(
        name='error',
        score_func=error,
        optimum=0,
        greater_is_better=False,
        needs_proba=False,
        needs_threshold=False
    )
    cls = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=30,
        seed=1,
        metric=error_rate,
    )
    cls.fit(X_train, y_train)

    cls.predictions = cls.predict(X_test)
    print("Error rate {:g} using {:s}".
          format(error_rate(y_test, predictions),
                 cls._automl[0]._metric.name))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ################################################################################
    Use self defined accuracy metric
    [WARNING] [2020-09-03 22:11:07,708:AutoML(1):d6d58dae5b02e07797da6d4d126ac9b6] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    [WARNING] [2020-09-03 22:11:07,712:AutoMLSMBO(1)::d6d58dae5b02e07797da6d4d126ac9b6] Could not find meta-data directory /home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.9.0-py3.7.egg/autosklearn/metalearning/files/accu_binary.classification_dense
    Accuracy score 0.958042 using accu
    ################################################################################
    Use self defined error metric
    [WARNING] [2020-09-03 22:12:02,907:AutoML(1):d6d58dae5b02e07797da6d4d126ac9b6] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    [WARNING] [2020-09-03 22:12:02,911:AutoMLSMBO(1)::d6d58dae5b02e07797da6d4d126ac9b6] Could not find meta-data directory /home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.9.0-py3.7.egg/autosklearn/metalearning/files/error_binary.classification_dense
    [WARNING] [2020-09-03 22:12:10,585:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:12:13,427:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:12:16,690:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:12:21,997:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:12:26,158:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:12:30,541:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:12:35,082:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:12:40,398:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:12:41,233:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:12:46,217:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    Error rate -0.041958 using error




Third example: Use own accuracy metric with additional argument
===============================================================


.. code-block:: default


    print("#"*80)
    print("Use self defined accuracy with additional argument")
    accuracy_scorer = autosklearn.metrics.make_scorer(
        name="accu_add",
        score_func=accuracy_wk,
        optimum=1,
        greater_is_better=True,
        needs_proba=False,
        needs_threshold=False,
        dummy=None,
    )
    cls = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=30,
        seed=1,
        metric=accuracy_scorer
    )
    cls.fit(X_train, y_train)

    predictions = cls.predict(X_test)
    print(
        "Accuracy score {:g} using {:s}".format(
            sklearn.metrics.accuracy_score(y_test, predictions),
            cls._automl[0]._metric.name
        )
    )

    print("#"*80)
    print("Use self defined error with additional argument")
    error_rate = autosklearn.metrics.make_scorer(
        name="error_add",
        score_func=error_wk,
        optimum=0,
        greater_is_better=True,
        needs_proba=False,
        needs_threshold=False,
        dummy=None,
    )
    cls = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=30,
        seed=1,
        metric=error_rate,
    )
    cls.fit(X_train, y_train)

    predictions = cls.predict(X_test)
    print(
        "Error rate {:g} using {:s}".format(
            error_rate(y_test, predictions),
            cls._automl[0]._metric.name
        )
    )




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ################################################################################
    Use self defined accuracy with additional argument
    [WARNING] [2020-09-03 22:12:57,865:AutoML(1):d6d58dae5b02e07797da6d4d126ac9b6] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    [WARNING] [2020-09-03 22:12:57,869:AutoMLSMBO(1)::d6d58dae5b02e07797da6d4d126ac9b6] Could not find meta-data directory /home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.9.0-py3.7.egg/autosklearn/metalearning/files/accu_add_binary.classification_dense
    Accuracy score 0.958042 using accu_add
    ################################################################################
    Use self defined error with additional argument
    [WARNING] [2020-09-03 22:13:53,037:AutoML(1):d6d58dae5b02e07797da6d4d126ac9b6] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    [WARNING] [2020-09-03 22:13:53,040:AutoMLSMBO(1)::d6d58dae5b02e07797da6d4d126ac9b6] Could not find meta-data directory /home/travis/miniconda/envs/testenv/lib/python3.7/site-packages/auto_sklearn-0.9.0-py3.7.egg/autosklearn/metalearning/files/error_add_binary.classification_dense
    [WARNING] [2020-09-03 22:13:54,169:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:13:56,891:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:00,699:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:03,389:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:06,575:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:10,419:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:11,094:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:12,183:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:17,136:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:17,889:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:22,297:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:27,942:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:32,420:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    [WARNING] [2020-09-03 22:14:37,368:smac.runhistory.runhistory2epm.RunHistory2EPM4LogCost] Got cost of smaller/equal to 0. Replace by 0.000010 since we use log cost.
    Error rate 0.615385 using error_add





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  35.150 seconds)


.. _sphx_glr_download_examples_40_advanced_example_metrics.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_metrics.py <example_metrics.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_metrics.ipynb <example_metrics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
